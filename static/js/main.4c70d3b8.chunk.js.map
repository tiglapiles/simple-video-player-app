{"version":3,"sources":["assets/captions.en.vtt","assets/captions.ch.vtt","components/VideoList.js","components/VideoPlayer.js","components/VideoContent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","VideoList","vlist","history","useHistory","className","map","o","i","onClick","push","redirectTo","key","src","alt","title","ch","VideoPlayer","props","state","this","item","video_path","playsInline","poster","type","kind","require","srcLang","label","default","position","autoHide","rates","seconds","order","Component","VideoContent","location","App","queryVideo","axios","method","url","data","model_action","query_string","video_ids","then","response","setState","videoList","result_data","catch","error","console","log","handleInput","e","inputValue","handleSearch","preventDefault","placeholder","onChange","href","path","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.4c70d3b8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/captions.en.3a3d8bbf.vtt\";","module.exports = __webpack_public_path__ + \"static/media/captions.ch.1ace3ffb.vtt\";","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport \"bulma/css/bulma.css\";\nimport \"../styles/video-list.css\";\n\nfunction VideoList({ vlist }) {\n  let history = useHistory();\n  const redirectTo = o => {\n    history.push(\"/video\", { ...o });\n  };\n  return (\n    <div className=\"video-list\">\n      <section className=\"section\">\n        <div className=\"container\">\n          <div className=\"columns is-multiline\">\n            {vlist.map((o, i) => (\n              <div\n                className=\"column is-3 video-item\"\n                onClick={() => redirectTo(o)}\n                key={i}\n              >\n                <div className=\"card\">\n                  <div className=\"card-image\">\n                    <figure className=\"image is-4by3\">\n                      <img\n                        src=\"https://switch-cn.gtgres.com/global-images/737058f0-642d-11ea-b2ec-abc0f6730fb6.jpg\"\n                        alt=\"Placeholder\"\n                      />\n                    </figure>\n                  </div>\n                  <div className=\"card-content\">\n                    <div className=\"contetn\">\n                      <div>{o.title.ch}</div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n\nexport default VideoList;\n","import React, { Component } from \"react\";\nimport {\n  Player,\n  ControlBar,\n  ClosedCaptionButton,\n  PlaybackRateMenuButton,\n  ReplayControl,\n  ForwardControl,\n  BigPlayButton\n} from \"video-react\";\nimport \"video-react/dist/video-react.css\";\nimport \"../styles/video-player.css\";\nconst PATH = \"http://seeker.haetek.com:6869/\";\n\nclass VideoPlayer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n  componentDidMount() {\n    // console.log(sub);\n  }\n  render() {\n    const {\n      item: { title, video_path }\n    } = this.props;\n    return (\n      <div>\n        <div className=\"content\">\n          <h2>{title.ch}</h2>\n        </div>\n        <div className=\"box player-box\">\n          <Player\n            playsInline\n            poster=\"https://switch-cn.gtgres.com/global-images/737058f0-642d-11ea-b2ec-abc0f6730fb6.jpg\"\n          >\n            <source src={`${PATH}${video_path[720]}`} type=\"video/mp4\" />\n            <track\n              kind=\"captions\"\n              src={require(\"../assets/captions.en.vtt\")}\n              srcLang=\"en\"\n              label=\"English\"\n              default\n            ></track>\n            <track\n              kind=\"captions\"\n              src={require(\"../assets/captions.ch.vtt\")}\n              srcLang=\"cn-Zh\"\n              label=\"Chinese\"\n            />\n            <BigPlayButton position=\"center\" />\n            <ControlBar autoHide={false}>\n              <PlaybackRateMenuButton rates={[5, 2, 1, 0.5, 0.1]} />\n              <ReplayControl seconds={10} order={2.2} />\n              <ForwardControl seconds={10} order={3.2} />\n              <ClosedCaptionButton order={7} />\n            </ControlBar>\n          </Player>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default VideoPlayer;\n","import React from \"react\";\nimport VideoPlayer from \"./VideoPlayer.js\";\nimport { useHistory } from \"react-router-dom\";\n\nfunction VideoContent(props) {\n  let history = useHistory();\n  return (\n    <div>\n      <div className=\"section\">\n        <div className=\"container\">\n          <VideoPlayer item={history.location.state} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default VideoContent;\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport axios from \"axios\";\nimport VideoList from \"./components/VideoList.js\";\nimport VideoContent from \"./components/VideoContent\";\nimport \"bulma/css/bulma.css\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputValue: \"\",\n      videoList: []\n    };\n  }\n  componentDidMount() {\n    this.queryVideo();\n  }\n  queryVideo = () => {\n    axios({\n      method: \"post\",\n      url: \"http://seeker.haetek.com:6869/videos\",\n      data: {\n        model_action: \"search\",\n        query_string: \"\",\n        video_ids: [],\n        type: \"global\"\n      }\n    })\n      .then(response => {\n        this.setState({ videoList: response.data.result_data });\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  };\n  handleInput = e => {\n    this.setState({ inputValue: e });\n  };\n  handleSearch = e => {\n    e.preventDefault();\n    this.queryVideo();\n  };\n  render() {\n    const { videoList } = this.state;\n    return (\n      <Router>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <div className=\"content\">\n              <div className=\"field has-addons\">\n                <div className=\"control\">\n                  <input\n                    className=\"input\"\n                    type=\"text\"\n                    placeholder=\"Search Videos\"\n                    onChange={this.handleInput}\n                  />\n                </div>\n                <div className=\"control\">\n                  <a\n                    href=\"/\"\n                    className=\"button is-info\"\n                    onClick={this.handleSearch}\n                  >\n                    Search\n                  </a>\n                </div>\n              </div>\n            </div>\n          </header>\n          <Switch>\n            <Route path=\"/video\">\n              <VideoContent />\n            </Route>\n            <Route path=\"/\">\n              <VideoList vlist={videoList} />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}