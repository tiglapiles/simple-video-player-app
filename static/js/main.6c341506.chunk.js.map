{"version":3,"sources":["components/VideoList.js","components/VideoPlayer.js","components/VideoContent.js","App.js","serviceWorker.js","index.js"],"names":["VideoList","history","useHistory","redirectTo","push","className","Array","from","length","map","i","onClick","src","alt","VideoPlayer","playsInline","poster","type","kind","srcLang","label","default","position","autoHide","rates","seconds","order","VideoContent","App","placeholder","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sQAuCeA,MAlCf,WACE,IAAIC,EAAUC,cACRC,EAAa,kBAAMF,EAAQG,KAAK,WACtC,OACE,yBAAKC,UAAU,cACb,6BAASA,UAAU,WACjB,yBAAKA,UAAU,aACb,yBAAKA,UAAU,wBACZC,MAAMC,KAAK,CAAEC,OAAQ,IAAKC,KAAI,SAAAC,GAAC,OAC9B,yBAAKL,UAAU,yBAAyBM,QAASR,GAC/C,yBAAKE,UAAU,QACb,yBAAKA,UAAU,cACb,4BAAQA,UAAU,iBAChB,yBACEO,IAAI,sFACJC,IAAI,wBAIV,yBAAKR,UAAU,gBACb,yBAAKA,UAAU,WACb,gE,sBC2CPS,MAxDf,WACE,OACE,yBAAKT,UAAU,kBACb,kBAAC,SAAD,CACEU,aAAW,EACXC,OAAO,uFAEP,4BACEJ,IAAI,2DACJK,KAAK,cAEP,4BACEL,IAAI,2DACJK,KAAK,cAGP,2BACEC,KAAK,WACLN,IAAI,yCACJO,QAAQ,KACRC,MAAM,UACNC,SAAO,IAET,2BACEH,KAAK,WACLN,IAAI,yCACJO,QAAQ,QACRC,MAAM,YAGR,2BACEF,KAAK,eACLN,IAAI,6CACJO,QAAQ,KACRC,MAAM,YAGR,2BACEF,KAAK,WACLN,IAAI,yCACJO,QAAQ,KACRC,MAAM,YAGR,kBAAC,gBAAD,CAAeE,SAAS,WACxB,kBAAC,aAAD,CAAYC,UAAU,GACpB,kBAAC,yBAAD,CAAwBC,MAAO,CAAC,EAAG,EAAG,EAAG,GAAK,MAC9C,kBAAC,gBAAD,CAAeC,QAAS,GAAIC,MAAO,MACnC,kBAAC,iBAAD,CAAgBD,QAAS,GAAIC,MAAO,MACpC,kBAAC,sBAAD,CAAqBA,MAAO,QC/CvBC,MAZf,WACE,OACE,6BACE,yBAAKtB,UAAU,WACb,yBAAKA,UAAU,aACb,kBAAC,EAAD,U,OCgCKuB,MAjCf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKvB,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKA,UAAU,WACb,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,WACb,2BACEA,UAAU,QACVY,KAAK,OACLY,YAAY,mBAGhB,yBAAKxB,UAAU,WACb,uBAAGA,UAAU,kBAAb,cAKR,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOyB,KAAK,UACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,WCpBQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.6c341506.chunk.js","sourcesContent":["import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport \"bulma/css/bulma.css\";\nimport \"../styles/video-list.css\";\n\nfunction VideoList() {\n  let history = useHistory();\n  const redirectTo = () => history.push(\"/video\");\n  return (\n    <div className=\"video-list\">\n      <section className=\"section\">\n        <div className=\"container\">\n          <div className=\"columns is-multiline\">\n            {Array.from({ length: 6 }).map(i => (\n              <div className=\"column is-3 video-item\" onClick={redirectTo}>\n                <div className=\"card\">\n                  <div className=\"card-image\">\n                    <figure className=\"image is-4by3\">\n                      <img\n                        src=\"https://switch-cn.gtgres.com/global-images/737058f0-642d-11ea-b2ec-abc0f6730fb6.jpg\"\n                        alt=\"Placeholder image\"\n                      />\n                    </figure>\n                  </div>\n                  <div className=\"card-content\">\n                    <div className=\"contetn\">\n                      <div>simple video player</div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n\nexport default VideoList;\n","import React from \"react\";\nimport {\n  Player,\n  ControlBar,\n  ClosedCaptionButton,\n  PlaybackRateMenuButton,\n  ReplayControl,\n  ForwardControl,\n  BigPlayButton\n} from \"video-react\";\nimport \"video-react/dist/video-react.css\";\nimport \"../styles/video-player.css\";\n\nfunction VideoPlayer() {\n  return (\n    <div className=\"box player-box\">\n      <Player\n        playsInline\n        poster=\"https://switch-cn.gtgres.com/global-images/737058f0-642d-11ea-b2ec-abc0f6730fb6.jpg\"\n      >\n        <source\n          src=\"//d2zihajmogu5jn.cloudfront.net/elephantsdream/ed_hd.mp4\"\n          type=\"video/mp4\"\n        />\n        <source\n          src=\"//d2zihajmogu5jn.cloudfront.net/elephantsdream/ed_hd.ogg\"\n          type=\"video/ogg\"\n        />\n\n        <track\n          kind=\"captions\"\n          src=\"/assets/elephantsdream/captions.en.vtt\"\n          srcLang=\"en\"\n          label=\"English\"\n          default\n        />\n        <track\n          kind=\"captions\"\n          src=\"/assets/elephantsdream/captions.sv.vtt\"\n          srcLang=\"cn-Zh\"\n          label=\"Chinese\"\n        />\n\n        <track\n          kind=\"descriptions\"\n          src=\"/assets/elephantsdream/descriptions.en.vtt\"\n          srcLang=\"en\"\n          label=\"English\"\n        />\n\n        <track\n          kind=\"chapters\"\n          src=\"/assets/elephantsdream/chapters.en.vtt\"\n          srcLang=\"en\"\n          label=\"English\"\n        />\n\n        <BigPlayButton position=\"center\" />\n        <ControlBar autoHide={false}>\n          <PlaybackRateMenuButton rates={[5, 2, 1, 0.5, 0.1]} />\n          <ReplayControl seconds={10} order={2.2} />\n          <ForwardControl seconds={10} order={3.2} />\n          <ClosedCaptionButton order={7} />\n        </ControlBar>\n      </Player>\n    </div>\n  );\n}\n\nexport default VideoPlayer;\n","import React from \"react\";\nimport VideoPlayer from \"./VideoPlayer.js\";\n\nfunction VideoContent() {\n  return (\n    <div>\n      <div className=\"section\">\n        <div className=\"container\">\n          <VideoPlayer />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default VideoContent;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport VideoList from \"./components/VideoList.js\";\nimport VideoContent from \"./components/VideoContent\";\nimport \"bulma/css/bulma.css\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div className=\"content\">\n            <div className=\"field has-addons\">\n              <div className=\"control\">\n                <input\n                  className=\"input\"\n                  type=\"text\"\n                  placeholder=\"Search Videos\"\n                />\n              </div>\n              <div className=\"control\">\n                <a className=\"button is-info\">Search</a>\n              </div>\n            </div>\n          </div>\n        </header>\n        <Switch>\n          <Route path=\"/video\">\n            <VideoContent />\n          </Route>\n          <Route path=\"/\">\n            <VideoList />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}